name: Build and Package Drifty on ARM

on:
  push:
    paths-ignore:
      - "Website/**"
      - "*.md"
      - "*.txt"
  pull_request:
    paths-ignore:
      - "Website/**"
      - "*.md"
      - "*.txt"
  workflow_dispatch:

jobs:
  build-linux-arm:
    name: Build and Package Drifty for linux arm
    runs-on: ubuntu-latest
    container: arm64v8/ubuntu:latest
    strategy:
      matrix:
        mode: [CLI, GUI]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Update system packages
        run: sudo apt-get update
      - name: Install required build dependencies
        run: |
          sudo apt-get install libasound2-dev libavcodec-dev libavformat-dev libavutil-dev libfreetype6-dev
          sudo apt-get install libgl-dev libglib2.0-dev libgtk-3-dev libpango1.0-dev libx11-dev libxtst-dev zlib1g-dev
      - name: Set up GraalVM JDK 21
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          set-java-home: true
          cache: 'maven'
      - name: Package Drifty CLI for linux
        if: ${{ matrix.mode == 'CLI' }}
        shell: bash
        run: mvn -P build-drifty-cli-for-ubuntu-latest package
      - name: Set Up Maven version 3.8.8 # For GUI build issues, maven version 3.8.8 needs to be used
        if: ${{ matrix.mode == 'GUI' }}
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.8.8
      - name: Build platform-specific C object for missing jdk libraries
        if: ${{ matrix.mode == 'GUI' }}
        shell: bash
        run: gcc -c config/missing_symbols.c -o config/missing_symbols-ubuntu-latest.o
      - name: Install dependency modules for GUI
        if: ${{ matrix.mode == 'GUI' }}
        run: mvn -U clean install
      - name: Package Drifty GUI for ${{ matrix.os }} with GluonFX maven plugin
        if: ${{ matrix.mode == 'GUI' }}
        run: mvn -P build-drifty-gui-for-ubuntu-latest gluonfx:build gluonfx:package -rf :GUI
      - name: Create Application Type specific folders
        run: |
          mkdir build
          mkdir build/${{ matrix.mode }}
      - name: Categorise build artifacts
        run: |
          if ${{ matrix.mode == 'CLI' }}; then
              mv "CLI/target/CLI/linux/Drifty CLI" "CLI/target/CLI/linux/Drifty-CLI_linux"
              mv "CLI/target/CLI/linux/Drifty-CLI_linux" -t build/CLI
          else
              mv GUI/target/gluonfx/aarch64-linux/GUI "GUI/target/gluonfx/aarch64-linux/Drifty-GUI_linux"
              mv "GUI/target/gluonfx/aarch64-linux/Drifty-GUI_linux" -t build/GUI
          fi
      - name: Tar build files # To prevent file permission loss
        run: |
          tar -cvf linux-arm-${{ matrix.mode }}.tar build
      - name: Push generated artifacts for linux-arm for ${{ matrix.mode }}
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm-${{ matrix.mode }}
          path: linux-arm-${{ matrix.mode }}.tar

  build-macos-arm:
    name: Build and Package Drifty for macos arm (M1)
    runs-on: macos-14
    strategy:
      matrix:
        mode: [CLI, GUI]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up GraalVM JDK 21
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          set-java-home: true
          cache: 'maven'
      - name: Package Drifty CLI for macos
        if: ${{ matrix.mode == 'CLI' }}
        shell: bash
        run: mvn -P build-drifty-cli-for-macos-latest package
      - name: Set Up Maven version 3.8.8 # For GUI build issues, maven version 3.8.8 needs to be used
        if: ${{ matrix.mode == 'GUI' }}
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.8.8
      - name: Build platform-specific C object for missing jdk libraries
        if: ${{ matrix.mode == 'GUI' }}
        shell: bash
        run: gcc -c config/missing_symbols.c -o config/missing_symbols-macos-latest.o
      - name: Install dependency modules for GUI
        if: ${{ matrix.mode == 'GUI' }}
        run: mvn -U clean install
      - name: Package Drifty GUI for macos-M1 with GluonFX maven plugin
        if: ${{ matrix.mode == 'GUI' }}
        run: mvn -P build-drifty-gui-for-macos-latest gluonfx:build gluonfx:package -rf :GUI
      - name: Create Application Type specific folders
        run: |
          mkdir build
          mkdir build/${{ matrix.mode }}
      - name: Categorise build artifacts
        run: |
          if ${{ matrix.mode == 'CLI' }}; then
              mv "CLI/target/CLI/macos/Drifty CLI" "CLI/target/CLI/macos/Drifty-CLI_macos"
              mv "CLI/target/CLI/macos/Drifty-CLI_macos" -t build/CLI
          else
              mv GUI/target/gluonfx/aarch64-darwin/GUI "GUI/target/gluonfx/aarch64-darwin/Drifty-GUI_macos"
              mv "GUI/target/gluonfx/aarch64-darwin/Drifty-GUI_macos" -t build/GUI
          fi
      - name: Tar build files # To prevent file permission loss
        run: |
          tar -cvf macos-arm-${{ matrix.mode }}.tar build
      - name: Push generated artifacts for macos-arm for ${{ matrix.mode }}
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm-${{ matrix.mode }}
          path: macos-arm-${{ matrix.mode }}.tar